
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log;
    #error_log logs/error.log;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream sudoku_server {
        # fail_timeout=0 means we always retry even if it failed to 
        # return a good HTTP response

        # for UNIX domain socket setups
        server unix:/tmp/sudoku-server.sock fail_timeout=0;
    }

    server {
        listen       80;
        server_name  muppetlabs.sandia.gov;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        
        # This is the line that forwards requests to the server.
        # The server must be running under gunicorn and listening
        # on the Unix-domain socket below.  See README.deployment
        # for more.
        location /sudoku {
            try_files $uri @proxy_to_sudoku_server;
        }

        location @proxy_to_sudoku_server {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # Don't do anything clever with redirects; we already set Host
            proxy_redirect off;
            proxy_pass http://sudoku_server;
        }
  
        # We assume that you've put the Javascript files (the contents
        # of the build/ directory after 'npm run build') into the
        # directory /opt/local/www/sudoku-client.
        location / {
            root /opt/local/www/sudoku-client;
            index  index.html index.htm;
            # This if statement is what lets us use client-side routing
            if (!-e $request_filename) {
                rewrite ^(.*)$ /index.html break;
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           share/nginx/html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    include        fastcgi.conf;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   share/nginx/html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   share/nginx/html;
    #        index  index.html index.htm;
    #    }
    #}

}
